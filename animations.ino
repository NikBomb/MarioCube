#include <FastLED.h>

#define LED_PIN  2

#define COLOR_ORDER GRB
#define CHIPSET     WS2811
#define NUM_TILES 4

#define BRIGHTNESS 15

const uint8_t kMatrixWidth = 16;
const uint8_t kMatrixHeight = 16;
const uint8_t numTiles = 4;

#define NUM_LEDS (kMatrixWidth * kMatrixHeight)
CRGB leds[ NUM_LEDS];
CLEDController* controllers[NUM_TILES];

// Time Management 

unsigned long currentMillis = 0;
unsigned long previousTime[NUM_TILES];
const int refreshTimeFrames = 500;

int previousPosition = 0; 

const uint32_t Mario1[] PROGMEM =
{
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFFF93500, 0xFFFA3600, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFFFA3600, 0xFFFA3600, 0xFFF93500, 0xFFFA3600, 0xFFF93500, 0xFFF93500, 0xFFF93500, 0xFFFA3600, 0xFFFA3600, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFC36500, 0xFFC36500, 0xFFC36500, 0xFFFC964E, 0xFFFB954D, 0xFFC26400, 0xFFFB964D, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFFFB954D, 0xFFFB954D, 0xFFFC964E, 0xFFC36500, 0xFFFB964E, 0xFFFB954D, 0xFFFB954D, 0xFFC36500, 0xFFFC964E, 0xFFC36500, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFFC26400, 0xFFFB954D, 0xFFC26400, 0xFFC36500, 0xFFFB964D, 0xFFFB954D, 0xFFFB954D, 0xFFC36500, 0xFFFB954D, 0xFFFB954D, 0xFFFC964E, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFFC36500, 0xFFC36500, 0xFFC26400, 0xFFC36400, 0xFFFB964E, 0xFFFB964E, 0xFFFB954D, 0xFFFB954D, 0xFFC36500, 0xFFC26400, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFB964D, 0xFFFC964E, 0xFFFB964E, 0xFFFB964E, 0xFFFB954D, 0xFFFC964E, 0xFFFB964E, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFC36500, 0xFFC26400, 0xFFF93600, 0xFFFA3600, 0xFFC26400, 0xFFC36500, 0xFFC26400, 0xFFC36500, 0xFF000000, 0xFF000000,
0xFFFB964E, 0xFFFB964E, 0xFFC36500, 0xFFC36500, 0xFFC36500, 0xFFC36500, 0xFFFA3600, 0xFFF93500, 0xFFFA3600, 0xFFC36500, 0xFFC36500, 0xFFC26400, 0xFFFB954D, 0xFFFB954D, 0xFFFB954D, 0xFF000000,
0xFF000000, 0xFFFC964E, 0xFFFB964D, 0xFFC36500, 0xFFC36500, 0xFFF93500, 0xFFFA3600, 0xFFFA3600, 0xFFFC964E, 0xFFFA3600, 0xFFC36500, 0xFFC26400, 0xFF000000, 0xFFFB954D, 0xFFFB964D, 0xFFFC964E,
0xFFFC964E, 0xFFFC964E, 0xFF000000, 0xFF000000, 0xFFF93500, 0xFFFA3600, 0xFFFA3600, 0xFFF93500, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFF000000, 0xFF000000, 0xFFC36500, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFFC36500, 0xFFC26400, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFFF93500, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFFF93500, 0xFFFA3600, 0xFFF93500, 0xFFFA3600, 0xFFC36500, 0xFFC26400, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFFC26400, 0xFFC36500, 0xFFF93500, 0xFFFA3600, 0xFFFA3600, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFA3600, 0xFFFA3600, 0xFFF93500, 0xFFC36500, 0xFFC36500, 0xFF000000,
0xFF000000, 0xFFC36500, 0xFFC36500, 0xFFC36500, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFC36500, 0xFFC36500, 0xFFC26400, 0xFF000000, 0xFF000000,

};

const uint32_t Mario2[] PROGMEM 
{0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFFF93500, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFFF93500, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFC26400, 0xFFC36500, 0xFFC36500, 0xFFFB954D, 0xFFFB964E, 0xFFC36500, 0xFFFB954D, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFFFB964E, 0xFFFB964E, 0xFFFB954D, 0xFFC36500, 0xFFFB964E, 0xFFFB954D, 0xFFFB954D, 0xFFC36500, 0xFFFB954D, 0xFFC26400, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFFC36500, 0xFFFB954D, 0xFFC26400, 0xFFC36500, 0xFFFC964E, 0xFFFB954D, 0xFFFB954D, 0xFFC36500, 0xFFFB964E, 0xFFFC964E, 0xFFFB964E, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFFC36500, 0xFFC26400, 0xFFC36500, 0xFFC26400, 0xFFFC964E, 0xFFFB964E, 0xFFFB954D, 0xFFFB964E, 0xFFC36500, 0xFFC36500, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFC964E, 0xFFFC964E, 0xFFFB964E, 0xFFFB954D, 0xFFFB954D, 0xFFFC964E, 0xFFFB964E, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFC36500, 0xFFC26400, 0xFFC36500, 0xFFFA3600, 0xFFC36500, 0xFFC36400, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFFC36500, 0xFFC36500, 0xFFC36500, 0xFFC36500, 0xFFFA3600, 0xFFFA3600, 0xFFC36500, 0xFFC36500, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFB964D, 0xFFFA3600, 0xFFFA3600, 0xFFFC964E, 0xFFF93500, 0xFFFA3600, 0xFFC26400, 0xFFC36500, 0xFFC36500, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFFC36500, 0xFFC36500, 0xFFC36500, 0xFFC36500, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFFFA3600, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFA3600, 0xFFF93500, 0xFFF93500, 0xFFFB954D, 0xFFFB954D, 0xFFFC964E, 0xFFC26400, 0xFFC36500, 0xFFF93500, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFA3600, 0xFFC26400, 0xFFFB954D, 0xFFFB964E, 0xFFFA3600, 0xFFF93500, 0xFFF93500, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFC26400, 0xFFC36500, 0xFFC36500, 0xFFF93500, 0xFFFA3600, 0xFFFA3600, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFC36500, 0xFFC36500, 0xFFC36500, 0xFFC36500, 0xFFC26400, 0xFFC36500, 0xFFC26400, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFC36500, 0xFFC36500, 0xFFC36500, 0xFFC26400, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,

};

const uint32_t Luigi1[] PROGMEM 
{0xFF000000, 0xFF000000, 0xFF3F7C00, 0xFF3F7C00, 0xFF3E7C00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF3F7C00, 0xFF3F7C00, 0xFF3E7B00, 0xFF000000,
0xFF000000, 0xFF3E7B00, 0xFF3E7C00, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF3E7B00, 0xFF3F7C00, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF3E7B00, 0xFF3F7C00, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF3F7C00, 0xFF3E7B00, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF3F7C00, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFFFB954D, 0xFFFB964E,
0xFFFB964E, 0xFFFB964E, 0xFFFC964E, 0xFF000000, 0xFF3F7C00, 0xFF3E7B00, 0xFFFFFFFF, 0xFFFC964E, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF3E7B00, 0xFF3E7B00, 0xFFFB954D, 0xFFFB964E, 0xFF000000,
0xFF000000, 0xFFFB954D, 0xFFFB964E, 0xFFFB954D, 0xFF3E7B00, 0xFF3E7C00, 0xFF3F7C00, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF3F7C00, 0xFF3F7C00, 0xFF3F7C00, 0xFF3F7C00, 0xFFFB964E, 0xFFFB964E,
0xFF000000, 0xFF000000, 0xFF3F7C00, 0xFF3F7C00, 0xFF3F7C00, 0xFF3E7B00, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF3F7C00, 0xFF3F7C00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFB954D, 0xFFFC964E, 0xFFFB964E, 0xFFFB954D, 0xFFFB964D, 0xFFFB954D, 0xFFFC964E, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF3E7C00, 0xFF3E7B00, 0xFFFB954D, 0xFFFB964E, 0xFFFB964E, 0xFFFB964E, 0xFF3F7C00, 0xFF3E7B00, 0xFF3E7B00, 0xFF3E7B00, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFFFC964E, 0xFFFB954D, 0xFFFC964E, 0xFF3E7C00, 0xFFFC964E, 0xFFFB954D, 0xFFFC964E, 0xFF3F7C00, 0xFF3E7B00, 0xFFFB954D, 0xFF3E7B00, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF3E7B00, 0xFFFC964E, 0xFF3E7C00, 0xFFFC964E, 0xFFFB954D, 0xFFFB954D, 0xFF3F7C00, 0xFFFB954D, 0xFFFB964E, 0xFFFC964E, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFC964E, 0xFF3F7C00, 0xFFFB964E, 0xFFFB964E, 0xFF3E7C00, 0xFF3F7C00, 0xFF3F7C00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
};

const uint32_t Luigi2[] PROGMEM  
{
  0xFF000000, 0xFF3F7C00, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF3E7B00, 0xFF3E7B00, 0xFF3E7B00, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF3F7C00, 0xFF3F7C00, 0xFF3F7C00, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF3F7C00, 0xFF3E7B00,
0xFF3E7B00, 0xFF3E7B00, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF3F7C00, 0xFF000000, 0xFFFC964E, 0xFF000000,
0xFFFC964E, 0xFFFB964E, 0xFFFB964E, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF3F7C00, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFB964E, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFB954D, 0xFFFFFFFF, 0xFF3F7C00, 0xFF3E7B00,
0xFF3F7C00, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF3F7C00, 0xFF3F7C00, 0xFF3F7C00, 0xFF3F7C00, 0xFF3F7C00, 0xFF3E7B00, 0xFFFC964E, 0xFFFB964E,
0xFF000000, 0xFF3F7C00, 0xFF3E7B00, 0xFF3F7C00, 0xFF3F7C00, 0xFF3F7C00, 0xFF3F7C00, 0xFF3F7C00, 0xFFFFFFFF, 0xFF3E7C00, 0xFF3E7B00, 0xFF3F7C00, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF3E7C00,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF3E7B00, 0xFFFFFFFF, 0xFF3E7B00, 0xFF3F7C00, 0xFF3F7C00, 0xFFFFFFFF, 0xFF3F7C00, 0xFF3F7C00, 0xFF3F7C00, 0xFF3F7C00, 0xFF3F7C00, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFB954D, 0xFFFC964E, 0xFFFC964E, 0xFFFC964E, 0xFFFB954D, 0xFFFC964E, 0xFFFB964D, 0xFF3E7B00, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF3F7C00, 0xFF3E7C00, 0xFF3F7C00, 0xFF3F7C00, 0xFF3E7C00, 0xFFFB954D, 0xFFFB954D, 0xFFFC964E, 0xFFFB954D, 0xFF3F7C00, 0xFF3E7C00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF3F7C00, 0xFFFC964E, 0xFF3E7B00, 0xFF3E7B00, 0xFFFB954D, 0xFFFB954D, 0xFFFB954D, 0xFF3E7C00, 0xFFFB964E, 0xFFFB964E, 0xFFFC964E, 0xFF3F7C00,
0xFF3E7B00, 0xFF3F7C00, 0xFF3F7C00, 0xFFFB954D, 0xFFFC964E, 0xFF3F7C00, 0xFFFC964E, 0xFFFC964E, 0xFFFC964E, 0xFF3F7C00, 0xFFFB964E, 0xFF3E7B00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF3F7C00, 0xFF3F7C00, 0xFF3F7C00, 0xFFFC964E, 0xFFFB964D, 0xFF3E7B00, 0xFFFB964E, 0xFF000000, 0xFF3E7B00, 0xFF3F7C00, 0xFF3E7C00,
0xFFFB954D, 0xFFFC964E, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFFFB964D, 0xFFFB954D, 0xFFFB954D,
0xFFFB954D, 0xFFFB954D, 0xFFFC964E, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,

};

const uint32_t Mush[] PROGMEM {0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF050505, 0xFF888888, 0xFFA5A3A4, 0xFF8D9991, 0xFF086D26, 0xFF005418, 0xFF000100, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000201, 0xFF008D29, 0xFF0EB440, 0xFFE3F6E8, 0xFFFFFFFF, 0xFFF3F3F3, 0xFFB6B5B6, 0xFF898788, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF005718, 0xFF3DB963, 0xFFE0F7E7, 0xFFFFFFFF, 0xFFF0F9F3, 0xFF4BC16F, 0xFF01952E, 0xFF002306, 0xFF2A292A, 0xFFC1C0C1, 0xFF7F7F7F, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF7A7A7A, 0xFFF4F4F4, 0xFFFFFFFF, 0xFFD1D0D1, 0xFF232824, 0xFF008724, 0xFF05A833, 0xFF37B85E, 0xFF3DBB63, 0xFF28B250, 0xFF2DB552, 0xFFCEECD7, 0xFF878687, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFFB3B1B3, 0xFFFFFFFF, 0xFF38B85E, 0xFF00A531, 0xFFABE1BB, 0xFFD0EED9, 0xFFB8E8C7, 0xFF0B8D32, 0xFF2D332F, 0xFFF7F5F6, 0xFFF8F8F8, 0xFFFFFFFF, 0xFFA0A0A0, 0xFF000000,
0xFF000000, 0xFF9F9F9F, 0xFFFFFFFF, 0xFF6A6A6A, 0xFF2B2A2A, 0xFF0F1010, 0xFFBACDC0, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFB1E3C0, 0xFF04A635, 0xFF5CC67C, 0xFFF0F7F2, 0xFF7E8480, 0xFF000000,
0xFF000000, 0xFF12702F, 0xFF1BB64A, 0xFF05A533, 0xFF02A532, 0xFFD0EED9, 0xFFFFFFFF, 0xFFFEFEFE, 0xFFFFFFFF, 0xFFD4D4D4, 0xFF313131, 0xFFDCDCDC, 0xFFEAEAEA, 0xFFFFFFFF, 0xFF9F9F9F, 0xFF000000,
0xFF000000, 0xFF9F9F9F, 0xFFFFFFFF, 0xFFEAEAEA, 0xFFDCDCDC, 0xFF313131, 0xFFD4D4D4, 0xFFFFFFFF, 0xFFFEFEFE, 0xFFFFFFFF, 0xFFD0EED9, 0xFF02A532, 0xFF05A533, 0xFF1BB64A, 0xFF12702F, 0xFF000000,
0xFF000000, 0xFF7E8480, 0xFFF0F7F2, 0xFF5CC67C, 0xFF04A635, 0xFFB1E3C0, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFBACDC0, 0xFF0F1010, 0xFF2B2A2A, 0xFF6A6A6A, 0xFFFFFFFF, 0xFF9F9F9F, 0xFF000000,
0xFF000000, 0xFFA0A0A0, 0xFFFFFFFF, 0xFFF8F8F8, 0xFFF7F5F6, 0xFF2D332F, 0xFF0B8D32, 0xFFB8E8C7, 0xFFD0EED9, 0xFFABE1BB, 0xFF00A531, 0xFF38B85E, 0xFFFFFFFF, 0xFFB3B1B3, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF878687, 0xFFCEECD7, 0xFF2DB552, 0xFF28B250, 0xFF3DBB63, 0xFF37B85E, 0xFF05A833, 0xFF008724, 0xFF232824, 0xFFD1D0D1, 0xFFFFFFFF, 0xFFF4F4F4, 0xFF7A7A7A, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF7F7F7F, 0xFFC1C0C1, 0xFF2A292A, 0xFF002306, 0xFF01952E, 0xFF4BC16F, 0xFFF0F9F3, 0xFFFFFFFF, 0xFFE0F7E7, 0xFF3DB963, 0xFF005718, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF898788, 0xFFB6B5B6, 0xFFF3F3F3, 0xFFFFFFFF, 0xFFE3F6E8, 0xFF0EB440, 0xFF008D29, 0xFF000201, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000100, 0xFF005418, 0xFF086D26, 0xFF8D9991, 0xFFA5A3A4, 0xFF888888, 0xFF050505, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,

};

const uint32_t Block0[] PROGMEM {0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFF1C1C, 0xFFFF951C, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFF951C, 0xFFFF1C1C, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFF951C, 0xFFFF951C, 0xFFFFFB00, 0xFFFFFB00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF2BFF1C, 0xFFFFFB00, 0xFFFFFB00, 0xFFFF951C, 0xFFFF951C, 0xFFFF951C, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFFFF1C1C, 0xFFFF1C1C, 0xFFFF1C1C, 0xFFFF951C, 0xFFFF951C, 0xFF000000, 0xFFFFFB00, 0xFFFFFB00, 0xFF000000, 0xFF2BFF1C, 0xFF2BFF1C, 0xFF1CFFF0, 0xFF1CFFF0, 0xFF9B59B6, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF9B59B6, 0xFF1CFFF0, 0xFF1CFFF0, 0xFF2BFF1C, 0xFF000000, 0xFF2BFF1C, 0xFFFFFB00, 0xFF000000, 0xFFFF951C, 0xFFFF951C, 0xFFFF951C, 0xFFFF1C1C, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFFFF951C, 0xFFFF951C, 0xFFFFFB00, 0xFF000000, 0xFFFFFB00, 0xFF2BFF1C, 0xFF000000, 0xFF1CFFF0, 0xFF1CFFF0, 0xFF1CFFF0, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF9B59B6, 0xFF1CFFF0, 0xFF1CFFF0, 0xFF1CFFF0, 0xFF2BFF1C, 0xFF2BFF1C, 0xFFFFFB00, 0xFFFFFB00, 0xFFFFFB00, 0xFFFF951C, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFB00, 0xFFFFFB00, 0xFF2BFF1C, 0xFF2BFF1C, 0xFF1CFFF0, 0xFF1CFFF0, 0xFF1CFFF0, 0xFF9B59B6, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF9B59B6, 0xFF9B59B6, 0xFF1CFFF0, 0xFF1CFFF0, 0xFF2BFF1C, 0xFF2BFF1C, 0xFF2BFF1C, 0xFFFFFB00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF2BFF1C, 0xFF2BFF1C, 0xFF2BFF1C, 0xFF1CFFF0, 0xFF000000, 0xFF000000, 0xFF9B59B6, 0xFF9B59B6, 0xFFFC72D7, 0xFFFC72D7, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF9B59B6, 0xFFFC72D7, 0xFFFC72D7, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF2BFF1C, 0xFF2BFF1C, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF2BFF1C, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFE1CC2, 0xFF9B59B6, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,

};

const uint32_t Block1[] PROGMEM {0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFCB640F, 0xFFCB5313, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFD81B, 0xFFFFFF06, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF5ACB07, 0xFFFFFF00, 0xFFFFFF08, 0xFFCE5A0E, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFE008, 0xFFFFFF00, 0xFFFAFF08, 0xFF3FFF19, 0xFF021600, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF18AB8C, 0xFF24FF24, 0xFF33FE19, 0xFFCBFA08, 0xFFFFFF00, 0xFFA9AA00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF27170E, 0xFFC47324, 0xFFC77320, 0xFFC36D22, 0xFFCDB909, 0xFFF0E400, 0xFF537908, 0xFF47FE19, 0xFF24FF1A, 0xFF1A7E16, 0xFF14EDDC, 0xFF39ACBC, 0xFF7C3F8A, 0xFF74458C, 0xFFAA52A1, 0xFF000000,
0xFF000000, 0xFF723961, 0xFFFF6FFF, 0xFFA266CC, 0xFFAAAAD2, 0xFF24BBBB, 0xFF024547, 0xFF28FE9A, 0xFF26FF15, 0xFF034009, 0xFFD4C802, 0xFFFFFF00, 0xFFFFD809, 0xFFFFD91F, 0xFF73441D, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF767418, 0xFFF7F800, 0xFFFFFF05, 0xFF42D715, 0xFF116B05, 0xFF29FE7F, 0xFF17FFFF, 0xFF195A5D, 0xFF834C99, 0xFFD557F1, 0xFFCC66C8, 0xFF7E3974, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF8B3E78, 0xFFC567C9, 0xFFD24DE7, 0xFF817BC0, 0xFF23F1EC, 0xFF19FFFA, 0xFF27FB7D, 0xFF1CFF11, 0xFF60FF17, 0xFF968701, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF1EB909, 0xFF40FF80, 0xFF17FCF7, 0xFF1EEFEB, 0xFF7D7DC0, 0xFF984EAF, 0xFFCA80CF, 0xFFC35AA9, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF5D0C4C, 0xFFFF80FF, 0xFFFF80FF, 0xFFF263FA, 0xFFC054C1, 0xFF8293D6, 0xFF1EFFFF, 0xFF17FFFF, 0xFF22FF80, 0xFF116200, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF1AA854, 0xFF33FFFF, 0xFF28FFFF, 0xFF6282B0, 0xFF000000, 0xFF000000, 0xFFD863BC, 0xFFFF79FF, 0xFFFF3CDA, 0xFFA71184, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF520000, 0xFFFF1281, 0xFFFF19FF, 0xFF69295C, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF1E5D62, 0xFF18FFFF, 0xFF1CFFFF, 0xFF1B5E5F, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF1B7A7C, 0xFF24FFFF, 0xFF18655E, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF64072F, 0xFFFF071C, 0xFF720100, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF0B0000, 0xFF1D0000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF060E11, 0xFF000000, 0xFF000000,

};


void setup() {
   FastLED.addLeds<CHIPSET, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalSMD5050);
   FastLED.addLeds<CHIPSET, LED_PIN + 1, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalSMD5050);
   FastLED.addLeds<CHIPSET, LED_PIN + 2, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalSMD5050);
   FastLED.addLeds<CHIPSET, LED_PIN +3, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalSMD5050);
   FastLED.setBrightness( BRIGHTNESS );
  
  for (int i =0; i < NUM_TILES; ++i){
    previousTime[i] = 0;
    FastLED[i].clearLedDataInternal();

  }
}

void Animation(uint8_t controller, const uint32_t* frame1, const uint32_t* frame2) {
  static uint8_t frame[] = {0,0,0,0};
  if (currentMillis - previousTime[controller] >= refreshTimeFrames){
    FastLED[controller].clearLedDataInternal();
    if (frame[controller] == 0) {
      for(int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(frame1[i]));
      }
      frame[controller] = 1;
    } else {
      for(int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(frame2[i]));
      }
      frame[controller] =0;
    }
    FastLED[controller].showLedsInternal(BRIGHTNESS);
    previousTime[controller] += refreshTimeFrames;
  }
} 

void AnimationSingle(uint8_t controller, const uint32_t* frame) {
  static bool isShowing = false;
  if (!isShowing) {
    FastLED[controller].clearLedDataInternal();
      for(int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(frame[i]));
      }
      FastLED[controller].showLedsInternal(BRIGHTNESS);
    }
  isShowing = true;  
} 

void loop() {
 currentMillis = millis();
 AnimationSingle(0, Mush); 
 Animation(2, Mario1,Mario2); 
 Animation(3, Block0, Block1);
 Animation(1, Luigi1,Luigi2); 

}
